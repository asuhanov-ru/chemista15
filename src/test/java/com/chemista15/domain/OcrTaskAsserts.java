package com.chemista15.domain;

import static com.chemista15.domain.AssertUtils.zonedDataTimeSameInstant;
import static org.assertj.core.api.Assertions.assertThat;

public class OcrTaskAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOcrTaskAllPropertiesEquals(OcrTask expected, OcrTask actual) {
        assertOcrTaskAutoGeneratedPropertiesEquals(expected, actual);
        assertOcrTaskAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOcrTaskAllUpdatablePropertiesEquals(OcrTask expected, OcrTask actual) {
        assertOcrTaskUpdatableFieldsEquals(expected, actual);
        assertOcrTaskUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOcrTaskAutoGeneratedPropertiesEquals(OcrTask expected, OcrTask actual) {
        assertThat(expected)
            .as("Verify OcrTask auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOcrTaskUpdatableFieldsEquals(OcrTask expected, OcrTask actual) {
        assertThat(expected)
            .as("Verify OcrTask relevant properties")
            .satisfies(e -> assertThat(e.getUuid()).as("check uuid").isEqualTo(actual.getUuid()))
            .satisfies(e -> assertThat(e.getMediaId()).as("check mediaId").isEqualTo(actual.getMediaId()))
            .satisfies(e -> assertThat(e.getPageNumber()).as("check pageNumber").isEqualTo(actual.getPageNumber()))
            .satisfies(e -> assertThat(e.getJobStatus()).as("check jobStatus").isEqualTo(actual.getJobStatus()))
            .satisfies(
                e ->
                    assertThat(e.getCreateTime())
                        .as("check createTime")
                        .usingComparator(zonedDataTimeSameInstant)
                        .isEqualTo(actual.getCreateTime())
            )
            .satisfies(
                e ->
                    assertThat(e.getStartTime())
                        .as("check startTime")
                        .usingComparator(zonedDataTimeSameInstant)
                        .isEqualTo(actual.getStartTime())
            )
            .satisfies(
                e ->
                    assertThat(e.getStopTime())
                        .as("check stopTime")
                        .usingComparator(zonedDataTimeSameInstant)
                        .isEqualTo(actual.getStopTime())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOcrTaskUpdatableRelationshipsEquals(OcrTask expected, OcrTask actual) {}
}
